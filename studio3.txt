Studio 3 write up

Your TA's name:
Isaias Suarez


Students in your studio group:

    Name        Student ID (begins with a 4)
	
1. Zuyan Jiang	446225
2. Tianran Shi  445101
3. Shuyu Wang	446285
4.
5.
6.


Part A

What are three data types that can serve as T?
Ans: Integer, Double, Float

Which class did you pick to examine its compareTo method?
Ans: Integer. 
How did its compareTo method impose a natural order on that class's instances?
Ans: It just take the mathemetical comparing, and if x < y, it return -1, else if x > y, it return 1, else, 0.
Part B

How does compareTo work?  Does it always return either -1, 0, or +1?
Ans. <a>. Working way: It just return a value to show the relation of the two objects.
	 <b>. The second is true. Because, in the compareTo() in String, the return value should be 
	 	  c1-c2, or len1 - len2. They can be other positive or negative numbers instead of -1 and
	 	  +1.
Part C

From your inspection of the LinkedList<T> class's source code:
Given a LinkedList<T> of size n, what is the asymptotic complexity, worst-case, 
for performing each of the following operations?

  1)  Appending to the end of that list  addLast(..)
  	  Ans: Asymptotic complexity is : T(n) = theta(1).
  	       Worst-case is : T(n) = 1.
  
  2)  Prepending to the beginning of that list   addFirst(...)
  	  Ans: Asymptotic complexity is : T(n) = theta(1).
  	       Worst-case is : T(n) = 1.
  3)  Inserting an element in the middle of the list  add(size/2, .....)
  	  Ans: Asymptotic complexity is : T(n) = O(n).
  	       Worst-case is : T(n) = n/2.
  	         
And for your implementation of a PriorityQueue using the Unordered List, 
given n elements already in the queue, what is the asymptotic complexity, 
worst-case for performing each of the following operations?
  
  4)  extractMin
      Ans: Asymptotic complexity is : T(n) = theta(n).
  	       Worst-case is : T(n) = n.
  
  5)  insert
  	  Ans: Asymptotic complexity is : T(n) = O(n).
  	       Worst-case is : T(n) = O(n).
  
  6)  isEmpty
      Ans: Asymptotic complexity is : T(n) = theta(1).
  	       Worst-case is : T(n) = 1.
  
Part D

From your implementation of OrderedArray, what is the asymptotic complexity, worst-case, for performing each of the following operations?

  1)  Adding an element at the end of the array
  	  Ans: <1> Asymptotic:  T(n) = theta(n).
  	  	   <2> Worst case:  T(n) = n.
  
  
  2)  Inserting an element at the beginning of the array
      Ans: <1> Asymptotic:  T(n) = theta(n).
  	  	   <2> Worst case:  T(n) = O(n).
  
  3)  Inserting an element in the middle of the list
      Ans: <1> Asymptotic:  T(n) = theta(n).
  	  	   <2> Worst case:  T(n) = O(n).  		 

And for your implementation of a PriorityQueue using the Ordered Array, 
given n elements already in the queue, what is the asymptotic complexity, 
worst-case for performing each of the following operations?
  
  4)  extractMin
  	  Ans: <1> Asymptotic: T(n) = theta(n).
  	  	   <2> Worst case: T(n) = O(n).
  
  5)  insert
  	  Ans: <1> Asymptotic: T(n) = theta(n).
  	       <2> Worst case: T(n) = O(n).
  
  6)  isEmpty
  	  Ans: <1> Asymptotic: T(n) = theta(1).
  	  	   <2> Worst case: T(n) = 1.
  
  
 
 Are there situations when you would want to use the OrderedArray or the UnorderedList instead of
 the binary heap described in class?   Explain please.
 Ans: If we only need to insert the elements and don't care about the order of the elements, we can 
 use the UnorderedList because it just take constant time. But the binary heap will take log(n) time.
 And if we only need to get the value with a specific index, using the array just take constant time.
 But using binary heap, the time complexity should be O(logn). So we prefer to use an ordered array.
 	  
